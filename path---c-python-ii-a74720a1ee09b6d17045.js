webpackJsonp([0xe33058739e2e],{477:function(n,a){n.exports={data:{site:{siteMetadata:{title:"Scientific Programming Blog",author:"Oscar Arbelaez"}},markdownRemark:{id:"/home/travis/build/sci-prog/sci-prog.github.io/src/pages/c-python-ii/index.md absPath of file >>> MarkdownRemark",html:'<p>Discutimos <a href="/c-python-i/">previamente</a> acerca de la validez de <a href="https://docs.python.org/2/library/ctypes.html">ctypes</a> para acelerar código de Python.\nVale mencionar que, a decir verdad, no estamos acelerando el código en Python: llamamos, desde Python, a un código en C que es más rápido.\nEsta diferencia que parece casi trivial es fundamental para comprender este enfoque.\n¿Qué tenemos que hacer siempre que queremos ejecutar código ya escrito?\n<em>Linkeamos</em> a una librería.\nEso es lo que vamos a hacer en este caso: en vez de ejecutar una rutina en Python, vamos a darle ese trabajo a una librería de C.\nRecordemos que hay dos tipos distintos de librerías: estáticas y dinámicas.\nPara poder ejecutar una librería desde Python es evidente que vamos a necesitar que ésta sea dinámica, ya que las llamadas a funciones van a tener que ser resueltas en tiempo de ejecución (recordemos que Python no se compila, por lo que no hay “tiempo de compilación”).</p>\n<p>Construimos una librería muy pequeña que hace algunas operaciones matemáticas en escalares y vectores, separadas en dos archivos llamados <code>add_two.c</code> y <code>arrays.c</code>.</p>\n<h2>Scalars</h2>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code><span class="token comment" spellcheck="true">/* file: add_two.c */</span>\n\n<span class="token keyword">float</span> <span class="token function">add_float</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">add_int</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">add_float_ref</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token operator">*</span>c <span class="token operator">=</span> <span class="token operator">*</span>a <span class="token operator">+</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">add_int_ref</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token operator">*</span>c <span class="token operator">=</span> <span class="token operator">*</span>a <span class="token operator">+</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>Arrays</h2>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code><span class="token comment" spellcheck="true">/* file: arrays.c */</span>\n\n<span class="token keyword">int</span> <span class="token function">add_int_array</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>c<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> i<span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">float</span> <span class="token function">dot_product</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">float</span> res<span class="token punctuation">;</span>\n  <span class="token keyword">int</span> i<span class="token punctuation">;</span>\n  res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res <span class="token operator">=</span> res <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Construimos la librería dinámica con</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ gcc -c -fPIC arrays.c\n$ gcc -c -fPIC add_two.c\n$ gcc -shared arrays.o add_two.o -o libmymath.so </code></pre>\n      </div>\n<p>Y chequeamos que la librería efectivamente tenga todos los símbolos definidos</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ nm -n libmymath.so\n...\n0000000000000730 T add_float_array\n00000000000008a0 T dot_product\n00000000000008d0 T add_float\n00000000000008e0 T add_int\n00000000000008f0 T add_float_ref\n0000000000000900 T add_int_ref\n...</code></pre>\n      </div>\n<h2>Trabajando con escalares</h2>\n<h3>Enteros</h3>\n<p>Con la librería dinámica ya compilada, ahora la comunicamos con Python.\nÉsa es la tarea de ctypes.\nLa librería ctypes es simplemente la definición de los tipos usuales de C (<code>int</code>, <code>float</code>, <code>double</code>…) y un <em>loader</em> dinámico de liberías.\n¿Cómo usamos estas funciones en Python, entonces?\nTomemos, por ejemplo, <code>add_int</code>.\nSólo neecesitamos cargar con ctypes la librería que compilamos y llamamos a la función:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> ctypes <span class="token keyword">as</span> C\n<span class="token operator">>></span><span class="token operator">></span> math <span class="token operator">=</span> C<span class="token punctuation">.</span>CDLL<span class="token punctuation">(</span><span class="token string">\'./libmymath.so\'</span><span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>add_int<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>\n<span class="token number">7</span>\n</code></pre>\n      </div>\n<p>Y listo!\nLogramos la titánica tarea de sumar dos enteros.</p>\n<h3>Punto flotante</h3>\n<p>¿Qué pasa si tratamos de sumar dos números de punto flotante?</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>add_float<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>\n<span class="token number">0</span>\n</code></pre>\n      </div>\n<p>¿Qué pasó aquí?\nLa función de la libreríá interpreta las entradas como <code>float</code>, pero nunca le dijimos a Python que estamos pasándole números en punto flotante.\nUna solución ingenua sería tratar de pasar simplemente <code>3.0</code> y <code>4.0</code> como parámetros, pero falla catastróficamente:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>add_float<span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">)</span>\nTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>\n  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>\nctypes<span class="token punctuation">.</span>ArgumentError<span class="token punctuation">:</span> argument <span class="token number">1</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>type <span class="token string">\'exceptions.TypeError\'</span><span class="token operator">></span><span class="token punctuation">:</span> Don\'t know how to convert parameter <span class="token number">1</span>\n</code></pre>\n      </div>\n<p>Claramente no podemos pasar cualquier parámetro bajo la confianza de que Python puede resolverlo.\nRecordemos que estamos llamando a una función de C, así que toda la magia del <em>duck typing</em> de Python no nos puede ayudar.\nTenemos que, explícitamente, decir que estamos pasando <code>float</code> de C.\nEs decir, tenemos uqe usar los tipos definidos en <code>ctypes</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>add_float<span class="token punctuation">(</span>C<span class="token punctuation">.</span>c_float<span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> C<span class="token punctuation">.</span>c_float<span class="token punctuation">(</span><span class="token number">4.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token number">2</span>\n</code></pre>\n      </div>\n<p>Estamos cerca.\nLo único que falta es que necesitamos que Python interprete el resultado como un <code>float</code> (¿cómo sabría Python qué tipo devuelve efectivamente la función?).</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>add_float<span class="token punctuation">.</span>restype <span class="token operator">=</span> C<span class="token punctuation">.</span>c_float\n<span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>add_float<span class="token punctuation">(</span>C<span class="token punctuation">.</span>c_float<span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> C<span class="token punctuation">.</span>c_float<span class="token punctuation">(</span><span class="token number">4.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token number">7.0</span>\n</code></pre>\n      </div>\n<p>Escribir <code>C.c_float</code> cada vez que queremos ejecutar esta función no parece ser la solución más limpia de todas.\nHay de hecho una forma mucho mejor para que Python sepa que la función van a tomar siempre <code>C.c_float</code> como argumentos, a través del método <code>argtypes</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>add_float<span class="token punctuation">.</span>restype <span class="token operator">=</span> C<span class="token punctuation">.</span>c_float\n<span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>add_float<span class="token punctuation">.</span>argtypes <span class="token operator">=</span> <span class="token punctuation">[</span>C<span class="token punctuation">.</span>c_float<span class="token punctuation">,</span> C<span class="token punctuation">.</span>c_float<span class="token punctuation">]</span>\n<span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>add_float<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>\n<span class="token number">7.0</span>\n</code></pre>\n      </div>\n<p>Y ahora la función puede ser llamada de forma completamente transparente, como llamaríamos a cualquier otra función de Python, pero en el fondo ejecuta código de C.</p>\n<h3>Por referencia</h3>\n<p>Cuando pasamos los argumentos por referencia (aunque puede ser una forma rara para implementarla en escalares, al menos al principio), la notación es mucho más engorrosa, ya que necesitamos pasar una posición de memoria.\nPodemos pedir la posición de memoria de una variable con la función <code>byref</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token operator">>></span><span class="token operator">></span> three <span class="token operator">=</span> C<span class="token punctuation">.</span>c_int<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> four <span class="token operator">=</span> C<span class="token punctuation">.</span>c_int<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> res <span class="token operator">=</span> C<span class="token punctuation">.</span>c_int<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>add_int_ref<span class="token punctuation">(</span>C<span class="token punctuation">.</span>byref<span class="token punctuation">(</span>three<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                     C<span class="token punctuation">.</span>byref<span class="token punctuation">(</span>four<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                     C<span class="token punctuation">.</span>byref<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token number">0</span>\n<span class="token operator">>></span><span class="token operator">></span> res<span class="token punctuation">.</span>value\n<span class="token number">7</span>\n</code></pre>\n      </div>\n<p>Hay, sin embargo, una ventaja: como los argumentos son siempre posiciones de memoria (y, en consecuencia, <em>enteros</em><sup id="fnref-1"><a href="#fn-1" class="footnote-ref">1</a></sup>), funciona inmediatamente para cualquier tipo de variable:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token operator">>></span><span class="token operator">></span> three <span class="token operator">=</span> C<span class="token punctuation">.</span>c_float<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> four <span class="token operator">=</span> C<span class="token punctuation">.</span>c_float<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> res <span class="token operator">=</span> C<span class="token punctuation">.</span>c_float<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>add_int_ref<span class="token punctuation">(</span>C<span class="token punctuation">.</span>byref<span class="token punctuation">(</span>three<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                     C<span class="token punctuation">.</span>byref<span class="token punctuation">(</span>four<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                     C<span class="token punctuation">.</span>byref<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token number">0</span>\n<span class="token operator">>></span><span class="token operator">></span> res<span class="token punctuation">.</span>value\n<span class="token number">7.0</span>\n</code></pre>\n      </div>\n<p>Ahora la notación no se puede limpiar fácilmente como en el caso anterior, pero podemos escribir un <em>wrapper</em> de la función</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">add_int_ref_python</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>\n  a_c <span class="token operator">=</span> C<span class="token punctuation">.</span>c_float<span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n  b_c <span class="token operator">=</span> C<span class="token punctuation">.</span>c_float<span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n  res_c <span class="token operator">=</span> C<span class="token punctuation">.</span>c_float<span class="token punctuation">(</span><span class="token punctuation">)</span>\n  math<span class="token punctuation">.</span>add_int_ref<span class="token punctuation">(</span>C<span class="token punctuation">.</span>byref<span class="token punctuation">(</span>a_c<span class="token punctuation">)</span><span class="token punctuation">,</span> C<span class="token punctuation">.</span>byref<span class="token punctuation">(</span>b_c<span class="token punctuation">)</span><span class="token punctuation">,</span> C<span class="token punctuation">.</span>byref<span class="token punctuation">(</span>res_c<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> res<span class="token punctuation">.</span>value\n</code></pre>\n      </div>\n<p>Y ahí tenemos una llamada a C que suma por referencia y completamente transparente para el usuario final.</p>\n<h2>Arrays</h2>\n<p>Con la experiencia de manejar argumentos por referencia en llamadas a funciones de C para escalares, manejar <em>arrays</em> no puede ser particularmente difícil: es simplemente una variable por referencia apuntando al primere elemento del <em>array</em>.\nEs, en general, buena práctica manejar la memoria en Python, pero esto lleva a la siguiente pregunta: ¿cómo alocamos memoria en Python?\nLa forma más inmediata es:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token operator">>></span><span class="token operator">></span> in1 <span class="token operator">=</span> <span class="token punctuation">(</span>C<span class="token punctuation">.</span>c_int <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> in2 <span class="token operator">=</span> <span class="token punctuation">(</span>C<span class="token punctuation">.</span>c_int <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> out <span class="token operator">=</span> <span class="token punctuation">(</span>C<span class="token punctuation">.</span>c_int <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>add_int_ref<span class="token punctuation">(</span>C<span class="token punctuation">.</span>byref<span class="token punctuation">(</span>in1<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                     C<span class="token punctuation">.</span>byref<span class="token punctuation">(</span>in2<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                     C<span class="token punctuation">.</span>byref<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                     C<span class="token punctuation">.</span>c_int<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> out<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> out<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>\n<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<h3>Numpy Arrays</h3>\n<p>Hay un enfoque distinto.\nYa tenemos todo un ecosistema desarrollado para trabajar con arrays: NumPy.\nUn array de Numpy es un montón de metadatos (como tamaño, forma, tipo) y un puntero a la primera posición en memoria.\nPodemos acceder a esa posición de memoria de un NumPy array a través de <code>data_as</code> o <code>data</code> en el array:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np\n<span class="token operator">>></span><span class="token operator">></span> intp <span class="token operator">=</span> C<span class="token punctuation">.</span>POINTER<span class="token punctuation">(</span>C<span class="token punctuation">.</span>c_int<span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> in1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>C<span class="token punctuation">.</span>c_int<span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> in2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>C<span class="token punctuation">.</span>c_int<span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> out <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>C<span class="token punctuation">.</span>c_int<span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>add_int_ref<span class="token punctuation">(</span>in1<span class="token punctuation">.</span>ctypes<span class="token punctuation">.</span>data_as<span class="token punctuation">(</span>intp<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                     in2<span class="token punctuation">.</span>ctypes<span class="token punctuation">.</span>data_as<span class="token punctuation">(</span>intp<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                     out<span class="token punctuation">.</span>ctypes<span class="token punctuation">.</span>data_as<span class="token punctuation">(</span>intp<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                     C<span class="token punctuation">.</span>c_int<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> out\narray<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int32<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Dos cosas son importantes aquí: a) no necesitamos definir el tipo como puntero a entero, podemos usar directamente el tipo <code>c_void_p</code> de ctypes; b) la salida es un array de NumPy que podemos usar inmediatamente en cualquier función de numpy.\nPodemos, al igual que ne el caso anterior, crear un <em>wrapper</em> para esta función para usarlo transparentemente como si fuera una función de Python.</p>\n<h2>Conclusiones</h2>\n<p>Esto cubre la mayor parte de la comunicación entre C y Python a través de funciones, que puede resultar útil si programamos en Python en un estilo parecido a C (con una programación más estructurada).\nLa siguiente parte de esta serie estará dedicada a una forma de usar ctypes orientada a objetos (y, consecuentemente, más “pythonica”).</p>\n<div class="footnotes">\n<hr>\n<ol>\n<li id="fn-1">\n<p>Existe, de todos modos, el puntero a void, <code>c_void_p</code>, dentro de ctypes.\nAdemás podemos crear el puntero a cualquier otro tipo con la función <code>POINTER(type)</code>.</p>\n<a href="#fnref-1" class="footnote-backref">↩</a>\n</li>\n</ol>\n</div>',
frontmatter:{title:"Interacción entre C y Python: Parte II - ctypes",date:"November 19, 2017"}}},pathContext:{slug:"/c-python-ii/"}}}});
//# sourceMappingURL=path---c-python-ii-a74720a1ee09b6d17045.js.map